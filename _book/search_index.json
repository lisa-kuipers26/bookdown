[["index.html", "Portofolio workflows 1 Introductie", " Portofolio workflows Lisa Kuipers 2022-05-31 1 Introductie In dit portfolio staan verschillende onderwerpen die over reproduceerbaar werken en goede workflows gaan. Voor elk onderwerp is een aparte pagina gemaakt. Op deze paginas staat beschreven wat ik geleerd heb tijdens mijn minor data science. "],["verwerken-van-data.html", "2 Verwerken van data", " 2 Verwerken van data Het interperteren en verwerken van data van iemand anders is belangrijk in de data science. Er wordt hier data gebruikt van een onderzoek waar C. elegans nematodes blootgesteld aan verschillende soorten stoffen. Belangrijkste in een data analyse is bergrijpen waar je data over gaat. Door de metadata te lezen krijg je een goed idee van waar je dataset overgaat en wat elke kopje betekent. Voor dit onderzoek willen we het effect weten van verschillende stoffen op de nematode maar ook de het effect van verschillende concentraties. Om dit te onderzoeken worden de kolommen RawData, compConcentration en expType gebruikt. In RawData staan het aantal nematodes op de plaat, in de compConcentration de concentratie van de stof en de expType de soort stof. Om globaal een idee te krijgen van het effect worden deze variabel tegen elkaar uitget in de grafiek hieronder. tabel &lt;- read_excel(here::here(&quot;data/CE.LIQ.FLOW.062_Tidydata.xlsx&quot;)) tabel$compConcentration &lt;- as.double(tabel$compConcentration) tabel$compName &lt;- as.factor(tabel$compName) #x-as concentreatie in -10log tabel$compConcentration &lt;- ifelse(tabel$compConcentration==0,0,-log10(tabel$compConcentration)) tabel %&gt;% ggplot(aes(x=compConcentration,y=RawData,color=compName,shape=expType))+ geom_jitter(width=0.1)+ labs(x=&quot;Concentratie (-log10) &quot;, y=&quot;Number of offspring&quot;) In het experiment is de positieve controle van dit experiment is ethanol . De negatieve controle van dit experiment is de S-medium Bij het verwerken van data is het belangrijk dat de data goed ingelezen wordt. Eén ding waar we tegen lopen bij deze dataset is dat de compConcentration ingelezen wordt als character type i.p.v. een getal. Hierdoor klopt de de x-as niet met wat je wilt zien, omdat er groepen en geen schaal weergegeven wordt. Dit wordt opgelost door het typ evan compConcentration te veranderen van een character naar een double. De bovenstaande grafiek geeft een globaal overzicht, maar er kunnen geen conclusies uitgetrokken worden. Hiervoor is een verdere data analyse nodig. Zon data analyse kan er als volgt uitzien: Data plotten zodat er een globaal overzicht hebt #Genormalizeerd en gemiddelde naar 1 neg_controle &lt;- tabel %&gt;% filter(expType==&quot;controlNegative&quot;) tabel$RawData[tabel$expType == &#39;controlNegative&#39;] &lt;- neg_controle$RawData / mean(neg_controle$RawData) tabel %&gt;% ggplot(aes(x=compConcentration,y=RawData,color=compName,shape=expType))+ geom_jitter(width=0.1)+ labs(x=&quot;Concentratie (-log10) &quot;, y=&quot;Number of offspring&quot;) "],["open-peer-review.html", "3 Open Peer Review 3.1 Onderzoek op reproduceerbaarheid beoordelen 3.2 Code zelf reproduceren", " 3 Open Peer Review 3.1 Onderzoek op reproduceerbaarheid beoordelen In dit gedeelte wordt een artikel beoordeeld op de reproduceerbaarheid. Deze wordt beoordeeld aan de hand van verschillende criteria omschreven in de onderstaande tabel. Voor de beoordeling is een artikel gekozen primair onderzoek dat beschikbaar is op PMC. Gebruikte artikel: Amawi KF, Alkhatib AJ. Urtica Pilulifera in Treating Pre-diabetic Rat Model to Control the Blood Glucose, Lipids and Oxidative Stress. Med Arch. 2020;74(3):168-171. doi:10.5455/medarh.2020.74.168-171 https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7405998/ 3.1.1 Omschrijving onderzoek Het doel van het onderzoek is kijken of Urtica pilulifera (een plant) effect heeft op pre-diabetische ratten en ook de antioxiderende werking onderzoeken De ratten werden ingedeeld in drie groepen van 10; een controle groep, een pre diabetische groep, en een groep met de behandeling van U. pilulifera. De ratten pre-diabetisch gemaakt kregen een hoog sucrose dieet, de controle groep een normaal dieet en de behandelde groep kreeg hetzelfde dieet als de pre-diabetische ratten met U. pilulifera extract geïnjecteerd. Na 30 dagen werden bloed samples afgenomen en getest op glucose, triglycerides, cholesterol, GSH, TAC en MDA Uit het onderoek bleek dat glucose, triglyceride en MDA niveaus in de pre-diabetic groep significant verhoogd waren en significant verlaagd in de U. pilulifera groep. GSH en TAC was significant hoger in de U. pilulifera ten opzichte van de pre-diabetische groep. Er zat geen significant verschil in cholesterol niveau in de groepen. 3.1.2 Beoordeling artikel In de tabel staat of het artikel aan de verschillende criterium voldoet. Criteria Answer Study purpose Yes Data availability No Data location Data location not stated Study location Yes Author review Author listed but did not fill out contact Ethics statement No Funding statement Yes Code availability No Het blijkt dat het artikel maar aan drie van acht criteria voldoet. Hoewel het artikel goed te lezen was is deze dus toch niet goed reproduceerbaar. 3.2 Code zelf reproduceren Net is er gekeken reporduceerbaarheid van een primair onderzoek. In dit onderdeel wordt er gekeken naar de reporduceerbaarheid van (R) code. Data en code van onderstaand onderzoek gebruikt: Strozza C, Myrskylä M. Monitoring trends and differences in COVID-19 case-fatality rates using decomposition methods: Contributions of age structure and age-specific fatality. PLoS One. 2020 Sep 10;15(9):e0238904. doi: 10.1371/journal.pone.0238904. PMID: 32913365; PMCID: PMC7482960. https://pubmed.ncbi.nlm.nih.gov/32913365/ Link naar de code: https://osf.io/g7vjd/ 3.2.1 Beoordeling script Het script zelf was goed te lezen. Er waren 4 scripts die elkaar opvolgde, door de getallen in de bestandsnaam was het makkelijk te zien welke als eerst uitgevoerd moest worden. In de scripts zelf stonden genoeg comments om te begrijpen waar elk stuk code voor diende en ziet de code zelf er netjes uit. Ik geef de leesbaarheid dus ook een 5/5 De code was ook goed reproduceerbaar. Er was alleen één probleem wat handmatig opgelost moest worden, dit probleem en hoe deze opgelost is staat beschreven hieronder. Hierdoor krijgt de reproduceerbaarheid een 4/5, want nadat dit probleem opgelost was, konden alle tabellen makkelijk gemaakt worden. 3.2.2 Probleem in script ### Monitoring trends and differences in COVID-19 case fatality ############## ### rates using decomposition methods: A demographic perspective ############## ### Last updated: 2020-07-16 09:27:20 CEST ### Contact: ### riffe@demogr.mpg.de ### acosta@demogr.mpg.de ### dudel@demogr.mpg.de ### Get data ################################################################## # Required packages source((&quot;R/00_functions.R&quot;)) # URL + filename url &lt;- &#39;https://osf.io/wu5ve//?action=download&#39; filename &lt;- &#39;Data/Output_10.csv&#39; # Load data GET(url, write_disk(filename, overwrite = TRUE)) dat &lt;- read_csv(filename,skip=3) Bij het uitvoeren van de code hierboven kwam de onderstaande foutmelding: In de foutmelding is een html bestand te zien. Dit hoort natuurlijk niet bij een read_csv() functie. In de code wordt het bestand van een online directory gedownload. De URL staat in de code en wanneer deze bezocht werd stond er dit bericht: Het bestand bevindt zich niet meer op de plek waar de URL naar verwees en kon dus ook niet gedownload worden waardoor de html van de pagina werd overgenomen. Er was echter wel een menu aan de zijkant aanwezig waar het mogelijk is om bij de github van het project te komen. Hier vond ik het output bestand wat nodig is voor de code en heb deze handmatig gedownload en toegevoegd aan de /data directory. Nadat deze in de directory stond kon het script en de rest van de scripts vlekkeloos uitgevoerd worden. Hieronder staat het script met de aanpassing. De rest van het script kan gevonden worden op de bovenstaande link. De output van het script zijn 6 verschillende excel bestanden met data over het verloop van COVID-19 in 6 verschillende landen. ### Monitoring trends and differences in COVID-19 case fatality ############## ### rates using decomposition methods: A demographic perspective ############## ### Last updated: 2020-07-16 09:27:20 CEST ### Contact: ### riffe@demogr.mpg.de ### acosta@demogr.mpg.de ### dudel@demogr.mpg.de ### Get data ################################################################## # Required packages source((&quot;R/00_functions.R&quot;)) # URL + filename filename &lt;- &#39;data/Output_10.csv&#39; # Load data dat &lt;- read_csv(filename,skip=3) ### Edit data (select countries, etc.) ######################################## # Lists of countries and regions countrylist &lt;- c(&quot;China&quot;,&quot;Germany&quot;,&quot;Italy&quot;,&quot;South Korea&quot;,&quot;Spain&quot;,&quot;USA&quot;) region &lt;- c(&quot;All&quot;,&quot;NYC&quot;) # Restrict dat &lt;- dat %&gt;% filter(Country %in% countrylist &amp; Region %in% region) # Remove Tests variable dat &lt;- dat %&gt;% mutate(Tests=NULL) # Drop if no cases/Deaths dat &lt;- na.omit(dat) ### Save ###################################################################### write_csv(dat,file=&quot;Data/inputdata.csv&quot;) "],["data-organiseren.html", "4 Data organiseren", " 4 Data organiseren Het organizeren van data is belangrijk voor reproduceerbaarheid en algemene goede workflow. Hieronder staat een voorbeeld van een map met verschillende projecten. Elke map heeft dezelfde indeling, bij de data en scripts zijn README bestanden toegevoegd waarin metadata staat over het onderzoek. De data mappen zelf zijn verdeeld in datatypes wanneer er hier veel van aanwezig zijn. Dit is om het overzicht te houden. Scripts staan in dezelfde folder als het project. "],["cv.html", "5 cv", " 5 cv Lisa Kuipers Contact 0612345678 lisa.kuipers26@hotmail.com Werkervaring HEMA Rhenen | 2015  heden Kassa medewerker, horeca medewerker Klanten helpen in de winkel, producten afrekenen en helpen op de klantenservice Klanten bedienen in de horeca Aanvullen van producten in de winkel Opleiding HAVO Rembrandt college Veenendaal | 2012 - 2017 HAVO diploma gehaald met het profiel natuur en gezondheid Hogeschool Utrecht | 2019  Heden HBO Biologie en medisch laboratoriumonderzoek (life science) Minor data science for biology Biomoleculair research specialisatie Talen Nederlands Engels Vaardigheden Microsoft office R Bash Python SQL "],["biologische-databases.html", "6 Biologische databases", " 6 Biologische databases Bij het zoeken naar vacatures werden er om veel verschillende c. Het bedrijf waar ik keek en intresse heb in stage lopen (genmab) werd in veel vacatures gevraagd om SQL kennis gevraagd. Er is een les waar er tijd besteed wordt aan het leren van SQL lijkt het mij handig om er wat dieper op in te gaan. Omdat dit nog een beetje een vaag doel is ging ik verder denken hoe ik dit kan toepassen. In een paar vacatures zag ik ook dat er gevraagd werd om mensen die een user interface konden maken. Met het project ga ik shiny leren en kwam op het idee om deze kennis toe te passen voor een product waarin mensen zoek opdrachten kunnen doen en zo informatie uit een database kunnen ophalen. Op deze manier kan ik de de SQL kennis toepassenen ook leren hoe een database met een app samenwerkt. Doel: Een product waarin mensen zoektermen opkunnen geven en een tabel met bijbehorende informatie returnd uit een database. (Globaal) stappen: 1. SQL kennis verbreden 2. Opzet shiny app bedenken 3. Shiny app programmeren 4. Database met shiny app verbinden "],["het-citeren-van-andere-werken.html", "7 Het citeren van andere werken", " 7 Het citeren van andere werken High trougputscreening is een techniek die gebruik wordt naar het onderzoeken van effecte van bepaalde medicijnen op kankercellen. Met deze technieken worden veel verschillende medicatie getest op cellen waaruit veel data uit één keer ontstaat(Carnero 2006) De opdracht werd gegeven door het prinses maxima center. Die zich focused op het onderzoek naar kinderoncologie(Ons verhaal n.d.) Onder gedaan naar leukemie (Brivio et al. 2021) Door gebruik te maken van shiny kan de programmeertaal R gebruikt worden om apps te maken (Shiny (n.d.)) Survival Rate for Children with Brain Tumors Improved Since 1990 (n.d.) "],["databases.html", "8 Databases", " 8 Databases Google Dengue Trends (http://www.google.org/denguetrends) Data Source: Google Flu Trends (http://www.google.org/flutrends) library(dslabs) library(tidyverse) #laden van gapminder gapminder_df &lt;- gapminder %&gt;% as.data.frame() #tidy maken van dengue data dengue_df &lt;- read.csv(&quot;data/dengue_data.csv&quot;, skip=11) %&gt;% as.data.frame col_dengue &lt;- colnames(dengue_df) dengue_tidy &lt;- dengue_df %&gt;% pivot_longer(cols=col_dengue[2:11], names_to=&quot;country&quot;, values_to=&quot;dengue_activity&quot;) %&gt;% separate(Date, into = c(&quot;year&quot;, &quot;month&quot;,&quot;day&quot;),convert = TRUE) #Tidy maken van flu data flu_df &lt;- read.csv(&quot;data/flu_data.csv&quot;,skip=11) %&gt;% as.data.frame() col_flu &lt;- colnames(flu_df) flu_tidy &lt;- flu_df %&gt;% pivot_longer(cols=col_flu[2:30], names_to=&quot;country&quot;, values_to=&quot;flu_activity&quot;) %&gt;% separate(Date, into = c(&quot;year&quot;, &quot;month&quot;,&quot;day&quot;),convert = TRUE) #opslaan als RDS saveRDS(dengue_tidy, file = &quot;data/dengue.rds&quot;) saveRDS(flu_tidy, file = &quot;data/flu.rds&quot;) saveRDS(gapminder_df, file = &quot;data/gapminder.rds&quot;) #opslaan als CSV write.csv(gapminder_df,&quot;data/gapminder.csv&quot;) write.csv(dengue_tidy,&quot;data/dengue.csv&quot;) write.csv(flu_tidy,&quot;data/flu.csv&quot;) SQL code voor het creëren van een database: CREATE DATABASE workflowsdb; library(DBI) #Connectie opzetten con &lt;- dbConnect(RPostgres::Postgres(), dbname = &quot;workflowsdb&quot;, host=&quot;localhost&quot;, port=&quot;5432&quot;, user=&quot;postgres&quot;, password=&quot;Datascience&quot;) #Aanmaken van tabellen in databse dbWriteTable(con, &quot;flu&quot;, flu_tidy) dbWriteTable(con, &quot;dengue&quot;, dengue_tidy) dbWriteTable(con, &quot;gapminder&quot;, gapminder_df) #Jaren verwijderen die niet aanwezig zijn in flu en dengue gapminder_minyear &lt;- gapminder_df[gapminder_df$year &gt;= min(flu_tidy$year), ] gapminder_maxyear &lt;- gapminder_minyear[gapminder_minyear$year &lt;= max(flu_tidy$year), ] #Landen weghalen die niet en flu en dengue aanwezig zijn landen &lt;- c(col_dengue[2:11], col_flu[2:30],recursive=TRUE) gapminder_clean &lt;- subset(gapminder_maxyear, country %in% landen) #Oude tabel verwijderen en nieuwe tabel invoegen dbRemoveTable(con, &quot;flu&quot;) dbWriteTable(con, &quot;gapminder&quot;, gapminder_clean) De ondesrtaande code is sql code wat gebruikt wordt om een grote tabel te creëren waar alle data in staat. Er worden left joins gebruikt omdat niet alle landen in beide de dengue dataset en flu dataset voorkomen. Deze informatie van bepaalde datasets kan wel interessant zijn voor het analyseren van data en wordt met de left join een NULL ingevoerd bij de missende data. Voor de rest worden alle kollomen van gapminder gekozen, de dag en maand van flu en de activity van beide flu en dengue. ook worden er joins op year, month en day gedaan. Dit is zodat ze gematched worden in de tabel en laad tijd verminderd bij het sorteren. Bij het sorteren wordt eerst op het jaartal gesorteerd en daarna op het land om het zo overzichtelijk te houden. SELECT gapminder.*, flu.&quot;day&quot;, flu.&quot;month&quot;, flu.flu_activity, dengue.dengue_activity FROM gapminder LEFT JOIN flu ON gapminder.&quot;year&quot; = flu.&quot;year&quot; and gapminder.country = flu.country LEFT join dengue ON dengue.&quot;year&quot; = flu.&quot;year&quot; and dengue.&quot;month&quot; = flu.&quot;month&quot; and dengue.&quot;day&quot; = flu.&quot;day&quot; and dengue.country = flu.country ORDER BY gapminder.&quot;year&quot;, gapminder.country ; Deze query wordt uitgevoerd in het programma beaver, hieronder een foto van het dashboard FOTO ! Door de volgende tekst toe te voegen boven bovenstaande query wordt er een tabel gemaakt genaamd all_data CREATE TABLE all_data AS Op deze afbeelding is te zien dat de tabel toegevoegd is aan de database FOTO ! #Data uit DB ophalen all_data &lt;- dbReadTable(con, &quot;all_data&quot;) aggregate(all_data$flu_activity, list(all_data$year), mean, na.rm=TRUE) aggregate(all_data$dengue_activity, list(all_data$year), mean, na.rm=TRUE) Nu we een dataset hebben met alle data kunnen er verschillende analyses op "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
